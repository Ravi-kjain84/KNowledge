Skill,Description,Suggested Books
Strategic Thinking,Ability to develop long-term visions, plan strategically, and align the organization’s direction with its goals.,- “Good Strategy Bad Strategy” by Richard Rumelt  - “The Art of Strategy” by Avinash K. Dixit and Barry J. Nalebuff
Leadership and Team Management,Effective leadership qualities including inspiring teams, managing diverse groups, and fostering a collaborative work environment.,- “Leaders Eat Last” by Simon Sinek  - “The Five Dysfunctions of a Team” by Patrick Lencioni
Financial Acumen,Strong understanding of financial principles, banking operations, and the ability to make informed financial decisions.,- “Principles of Corporate Finance” by Richard A. Brealey, Stewart C. Myers, and Franklin Allen
Regulatory Knowledge,Awareness of the regulatory environment affecting the banking industry, including compliance, risk management, and governance.,- “Financial Regulation: Law and Policy” by Michael S. Barr, Howell E. Jackson, and Margaret E. Tahyar
Change Management,Ability to manage and lead organizational change, ensuring smooth transitions and effective implementation of new initiatives.,- “Leading Change” by John P. Kotter  - “Switch: How to Change Things When Change Is Hard” by Chip Heath and Dan Heath


import pandas as pd

# Sample DataFrame
data = {
    'Column1': [1, 2, 3],
    'Column2': [4, 5, 6],
    'Column3': [7, 8, 9]
}

df = pd.DataFrame(data)

# Function to convert DataFrame to .dat file with custom separator
def df_to_dat_custom(df, file_path):
    with open(file_path, 'w') as file:
        # Write the initial line
        file.write('! data\n')
        
        # Write the header
        file.write(' '.join(df.columns) + '\n')
        
        # Write the DataFrame data with the custom separator
        for row in df.itertuples(index=False, name=None):
            file.write(' : '.join(map(str, row)) + '\n')

# Specify the file path
file_path = 'output.dat'

# Call the function to write DataFrame to .dat file
df_to_dat_custom(df, file_path)




import pandas as pd

# Sample DataFrame
data = {
    'Column1': [1, 2, 3],
    'Column2': [4, 5, 6],
    'Column3': [7, 8, 9]
}

df = pd.DataFrame(data)

# Convert DataFrame to .dat file
def df_to_dat(df, file_path):
    # Open file in write mode
    with open(file_path, 'w') as file:
        # Write the initial line
        file.write('! data\n')
        # Write the DataFrame to the file with the specified separator
        df.to_csv(file, sep='; ', index=False, header=True)

# Specify the file path
file_path = 'output.dat'

# Call the function to write DataFrame to .dat file
df_to_dat(df, file_path)



from scripts.data_processor import DataProcessor

if __name__ == "__main__":
    processor = DataProcessor(
        remind_file='data/remind.xlsx',
        remind_sheet='RemindSheet',
        hub_file='data/hub.xlsx',
        hub_sheet='HubSheet',
        fusion_file='data/fusion.xlsx',
        fusion_sheet='FusionSheet',
        mapping_file='data/mapping.xlsx',
        mapping_sheets=['AccountList', 'CustomerList', 'EntityArea', 'EntityProduct', 'TransactionTypeMapping']
    )
    processor.import_data()
    processor.clean_remind_data()
    processor.clean_hub_data()
    processor.compare_and_populate_entity()
    cpa_details = processor.get_cpa_details()
    processor.create_control_dashboard('output/control_dashboard.xlsx')
    entity_details = processor.get_entity_details()
    processor.gather_final_upload_details()
    processor.export_to_excel('output/final_upload.xlsx')
    processor.populate_control_data('output/control_data.xlsx')
