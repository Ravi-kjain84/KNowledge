from google.cloud import bigquery
import pandas as pd

# Function to fetch schema for a given project and dataset
def fetch_schema(project_id, dataset_id):
    client = bigquery.Client()
    query = f"""
        SELECT
            table_name,
            column_name,
            data_type
        FROM
            `{project_id}.{dataset_id}.INFORMATION_SCHEMA.COLUMNS`
        ORDER BY
            table_name,
            ordinal_position
    """
    query_job = client.query(query)
    schema_results = query_job.result()
    schema_df = pd.DataFrame(schema_results)
    return schema_df

# Function to categorize tables based on naming patterns
def categorize_tables(table_names):
    categories = {
        'Source': set(),
        'Reference Data': set(),
        'Report': set(),
        'Intermediary': set()
    }

    for table_name in table_names:
        if table_name.lower().endswith('_source'):
            categories['Source'].add(table_name)
        elif '_rd_' in table_name.lower():
            categories['Reference Data'].add(table_name)
        elif table_name.lower().endswith('_report'):
            categories['Report'].add(table_name)
        else:
            categories['Intermediary'].add(table_name)

    return categories

# Function to compare schemas and find differences
def compare_schemas(projects):
    all_tables = {}
    for project_id, dataset_id in projects:
        schema_df = fetch_schema(project_id, dataset_id)
        tables = set(schema_df['table_name'])
        all_tables[project_id] = tables
    
    common_tables = set.intersection(*all_tables.values())
    unique_tables = {project_id: tables - common_tables for project_id, tables in all_tables.items()}
    
    comparison_results = {}
    for project_id, tables in unique_tables.items():
        categories = categorize_tables(tables)
        comparison_results[project_id] = categories
    
    return comparison_results

# List of projects and datasets to compare
projects = [
    ('project1_id', 'dataset1_id'),
    ('project2_id', 'dataset2_id'),
    ('project3_id', 'dataset3_id'),
    ('project4_id', 'dataset4_id')
]

# Compare schemas and find differences
comparison_results = compare_schemas(projects)

# Convert comparison results to DataFrame
df_dict = {}
for project_id, categories in comparison_results.items():
    for category, tables in categories.items():
        for table in tables:
            df_dict.setdefault('Project', []).append(project_id)
            df_dict.setdefault('Category', []).append(category)
            df_dict.setdefault('Table', []).append(table)

result_df = pd.DataFrame(df_dict)
print(result_df)
