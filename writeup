import pandas as pd

# Sample DataFrame with string and float columns
data = {
    'col1': [1, 2, 3],
    'col2': [4.5, 5.5, 6.5],  # Column to keep all decimals
    'col3': [7, 8, 9],
    'col4': [10, 11, 12],
    'col5': ['A', 'B', 'C'],  # String column
    'col6': [16, 17, 18],
    'col7': ['X', 'Y', 'Z'],  # String column
    'col8': [22, 23, 24],
    'col9': [25, 26, 27],
    'col10': [28.5, 29.5, 30.5]  # Column to round to zero decimals
}

df = pd.DataFrame(data)

# File path
file_path = 'output.txt'

# Header string
header = "My data is here:"

# Specify the column names
float_col_to_round = 'col10'
float_col_keep_decimals = 'col2'

# Write to file with header
with open(file_path, 'w') as file:
    file.write(f'{header}\n')
    for index, row in df.iterrows():
        formatted_values = []
        for col in df.columns:
            value = row[col]
            if col == float_col_to_round:
                formatted_values.append(f'{value:.0f}')  # Round to zero decimals
            else:
                formatted_values.append(f'{value}')
        line = ';'.join(formatted_values)
        file.write(f'{line}\n')

# Display the content of the text file for verification
with open(file_path, 'r') as file:
    print(file.read())





import pandas as pd

# Example DataFrame
df = pd.DataFrame({
    'column2': ['A', 'B', 'C', 'D', 'A', 'F']
})

# Example mapping DataFrame
mapping_df = pd.DataFrame({
    'column2': ['B', 'C', 'D'],
    'column3': ['MappedValue1', 'MappedValue2', 'MappedValue3']
})

# Define a function to apply the logic
def populate_column1(row, mapping_dict):
    if row['column2'] == 'A':
        return 'b'
    elif row['column2'] in mapping_dict:
        return mapping_dict[row['column2']]
    else:
        return 'e'

# Create a dictionary for faster lookup from the mapping DataFrame
mapping_dict = mapping_df.set_index('column2')['column3'].to_dict()

# Apply the function to populate 'column1'
df['column1'] = df.apply(populate_column1, axis=1, mapping_dict=mapping_dict)

print(df)








= let
    Value = [Value],
    Currency = [Currency],
    RangeStart = Number.RoundDown(Value / 50000) * 50000,
    RangeEnd = RangeStart + 49999,
    RangeText = if Value < 5000 then Currency & " less than " & Currency & " 5000" else Currency & " " & Text.From(RangeStart + 1) & " to " & Currency & " " & Text.From(RangeEnd)
in
    RangeText



import pandas as pd

# Sample data for the DataFrame
data = {
    'Categories': ['A', 'B', 'C', 'D'],
    'Values': [10, 20, 30, 40]
}

df = pd.DataFrame(data)

# Create a Pandas Excel writer using XlsxWriter as the engine
with pd.ExcelWriter('data_with_chart.xlsx', engine='xlsxwriter') as writer:
    # Write your DataFrame to an Excel file on Sheet1
    df.to_excel(writer, sheet_name='Sheet1', index=False)

    # Access the XlsxWriter workbook and worksheet objects from the dataframe
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']
    
    # Create a bar chart object
    chart = workbook.add_chart({'type': 'bar'})

    # Configure the series of the chart from the DataFrame data. 
    # Here we need to adjust the cell range based on the DataFrame's size
    chart.add_series({
        'categories': '=Sheet1!$A$2:$A$5',
        'values':     '=Sheet1!$B$2:$B$5',
    })

    # Optionally, add chart title, axis titles, etc.
    chart.set_title({'name': 'Values by Category'})
    chart.set_x_axis({'name': 'Category'})
    chart.set_y_axis({'name': 'Value'})

    # Insert the chart into the worksheet with an offset
    worksheet.insert_chart('D2', chart)

# Note: The Excel file 'data_with_chart.xlsx' is saved in your current directory.